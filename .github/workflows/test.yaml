name: Dockerized Tests with Coverage

on:
  push:
    branches: [develop, test, main]
  pull_request:
    branches: [develop, test, main]

env:
  ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
  ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        uses: cli/cli-action@v2

      - name: Run tests in Docker with coverage
        run: |
          docker compose -f docker-compose.test.yml run --rm \
            --env ALPACA_API_KEY="${ALPACA_API_KEY}" \
            --env ALPACA_SECRET_KEY="${ALPACA_SECRET_KEY}" \
            test pytest --cov=src --cov-report=term --cov-report=xml

      - name: Tear down containers
        if: always()
        run: docker compose -f docker-compose.test.yml down

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: ignore

      - name: Upload indicator chart artifacts
        uses: actions/upload-artifact@v4
        with:
          name: indicator-charts
          path: output/integration_tests/**/*.png
          if-no-files-found: ignore

      - name: Post coverage report as PR comment
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
          ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
        run: |
          echo '### ðŸ“Š Code Coverage Summary' > coverage-comment.md
          echo '```' >> coverage-comment.md
          docker compose -f docker-compose.test.yml run --rm \
            --env ALPACA_API_KEY="${ALPACA_API_KEY}" \
            --env ALPACA_SECRET_KEY="${ALPACA_SECRET_KEY}" \
            test coverage report >> coverage-comment.md
          echo '```' >> coverage-comment.md

          PR_NUMBER=${{ github.event.pull_request.number }}

          if [ -n "$PR_NUMBER" ]; then
            gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
              -f body="$(cat coverage-comment.md)"
          else
            echo "No PR number found â€” skipping comment."
          fi
